!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.9~svn20110310	//
ANSI_GREEN	./game/ColorPrint.java	/^    private static final String ANSI_GREEN = "\\u001B[32m";$/;"	f	class:ColorPrint	file:
ANSI_RED	./game/ColorPrint.java	/^    private static final String ANSI_RED = "\\u001B[31m";$/;"	f	class:ColorPrint	file:
ANSI_RESET	./game/ColorPrint.java	/^    private static final String ANSI_RESET = "\\u001B[0m";$/;"	f	class:ColorPrint	file:
ANSI_YELLOW	./game/ColorPrint.java	/^    private static final String ANSI_YELLOW = "\\u001B[33m";$/;"	f	class:ColorPrint	file:
App	./App.java	/^public class App {$/;"	c
BLACK	./properties/PieceColor.java	/^    BLACK("black"),$/;"	e	enum:PieceColor	file:
Bishop	./pieces/Bishop.java	/^    public Bishop (PieceColor color, Position position) {$/;"	m	class:Bishop
Bishop	./pieces/Bishop.java	/^public class Bishop extends Piece {$/;"	c
Board	./board/Board.java	/^    public Board (Piece[][] board) {$/;"	m	class:Board
Board	./board/Board.java	/^public class Board {$/;"	c
ColorPrint	./game/ColorPrint.java	/^public class ColorPrint {$/;"	c
Empty	./pieces/Empty.java	/^    public Empty(Position position) {$/;"	m	class:Empty
Empty	./pieces/Empty.java	/^    public Empty(Position position, char character) {$/;"	m	class:Empty
Empty	./pieces/Empty.java	/^public class Empty extends Piece {$/;"	c
FillBoard	./board/FillBoard.java	/^    public FillBoard(Piece[][] boardArr) {$/;"	m	class:FillBoard
FillBoard	./board/FillBoard.java	/^public class FillBoard {$/;"	c
Game	./game/Game.java	/^public class Game {$/;"	c
King	./pieces/King.java	/^    public King (PieceColor color, Position position) {$/;"	m	class:King
King	./pieces/King.java	/^public class King extends Piece {$/;"	c
Knight	./pieces/Knight.java	/^    public Knight (PieceColor color, Position position) {$/;"	m	class:Knight
Knight	./pieces/Knight.java	/^public class Knight extends Piece {$/;"	c
NONE	./properties/PieceColor.java	/^    NONE;$/;"	e	enum:PieceColor	file:
Pawn	./pieces/Pawn.java	/^    public Pawn (PieceColor color, Position position) {$/;"	m	class:Pawn
Pawn	./pieces/Pawn.java	/^public class Pawn extends Piece {$/;"	c
Piece	./pieces/Piece.java	/^    public Piece() {$/;"	m	class:Piece
Piece	./pieces/Piece.java	/^    public Piece(char characterW, char characterB, PieceColor color, Position position) {$/;"	m	class:Piece
Piece	./pieces/Piece.java	/^public abstract class Piece {$/;"	c
PieceColor	./properties/PieceColor.java	/^    PieceColor() {}$/;"	m	class:PieceColor
PieceColor	./properties/PieceColor.java	/^    PieceColor(String color) {$/;"	m	class:PieceColor
PieceColor	./properties/PieceColor.java	/^public enum PieceColor {$/;"	g
Position	./board/Position.java	/^    public Position(int x, int y) {$/;"	m	class:Position
Position	./board/Position.java	/^public class Position {$/;"	c
Queen	./pieces/Queen.java	/^    public Queen (PieceColor color, Position position) {$/;"	m	class:Queen
Queen	./pieces/Queen.java	/^public class Queen extends Piece {$/;"	c
Rook	./pieces/Rook.java	/^    public Rook (PieceColor color, Position position) {$/;"	m	class:Rook
Rook	./pieces/Rook.java	/^public class Rook extends Piece {$/;"	c
WHITE	./properties/PieceColor.java	/^    WHITE("white"),$/;"	e	enum:PieceColor	file:
am.chess	./App.java	/^package am.chess;$/;"	p
am.chess.board	./board/Board.java	/^package am.chess.board;$/;"	p
am.chess.board	./board/FillBoard.java	/^package am.chess.board;$/;"	p
am.chess.board	./board/Position.java	/^package am.chess.board;$/;"	p
am.chess.game	./game/ColorPrint.java	/^package am.chess.game;$/;"	p
am.chess.game	./game/Game.java	/^package am.chess.game;$/;"	p
am.chess.pieces	./pieces/Bishop.java	/^package am.chess.pieces;$/;"	p
am.chess.pieces	./pieces/Empty.java	/^package am.chess.pieces;$/;"	p
am.chess.pieces	./pieces/King.java	/^package am.chess.pieces;$/;"	p
am.chess.pieces	./pieces/Knight.java	/^package am.chess.pieces;$/;"	p
am.chess.pieces	./pieces/Pawn.java	/^package am.chess.pieces;$/;"	p
am.chess.pieces	./pieces/Piece.java	/^package am.chess.pieces;$/;"	p
am.chess.pieces	./pieces/Queen.java	/^package am.chess.pieces;$/;"	p
am.chess.pieces	./pieces/Rook.java	/^package am.chess.pieces;$/;"	p
am.chess.properties	./properties/PieceColor.java	/^package am.chess.properties;$/;"	p
askForXPosition	./game/Game.java	/^    private int askForXPosition(String text) {$/;"	m	class:Game	file:
askForYPosition	./game/Game.java	/^    private int askForYPosition(String text) {$/;"	m	class:Game	file:
bishop	./pieces/Queen.java	/^    private final Bishop bishop;$/;"	f	class:Queen	file:
blackPieces	./board/FillBoard.java	/^    private final Piece[][] blackPieces = new Piece[8][8];$/;"	f	class:FillBoard	file:
blackPlayersInit	./board/FillBoard.java	/^    public void blackPlayersInit() {$/;"	m	class:FillBoard
board	./board/Board.java	/^    private final Piece[][] board;$/;"	f	class:Board	file:
board	./board/FillBoard.java	/^    public static Board board;$/;"	f	class:FillBoard
board	./game/Game.java	/^    private final Board board = new Board(boardArr);$/;"	f	class:Game	file:
board	./pieces/Piece.java	/^    public static Board board;$/;"	f	class:Piece
boardArr	./board/FillBoard.java	/^    private static Piece[][] boardArr;$/;"	f	class:FillBoard	file:
boardArr	./game/Game.java	/^    private final Piece[][] boardArr = new Piece[8][8];$/;"	f	class:Game	file:
boardArr	./pieces/Piece.java	/^    public static Piece[][] boardArr;$/;"	f	class:Piece
boardImg	./board/Board.java	/^    private final String[] boardImg = new String[10];$/;"	f	class:Board	file:
changeOrder	./game/Game.java	/^    private void changeOrder() {$/;"	m	class:Game	file:
characterB	./pieces/Piece.java	/^    private final char characterB;$/;"	f	class:Piece	file:
characterW	./pieces/Piece.java	/^    private final char characterW;$/;"	f	class:Piece	file:
checkAttaks	./game/Game.java	/^	private boolean checkAttaks(Piece[][] pieces, Position kingPos) {$/;"	m	class:Game	file:
checkKingsAttack	./game/Game.java	/^	private PieceColor checkKingsAttack() {$/;"	m	class:Game	file:
checkPositions	./pieces/Rook.java	/^    private boolean checkPositions(Position currentPosition, Position newPosition) {$/;"	m	class:Rook	file:
checkTurn	./game/Game.java	/^    private boolean checkTurn(Piece figure) {$/;"	m	class:Game	file:
color	./pieces/Piece.java	/^    private final PieceColor color;$/;"	f	class:Piece	file:
color	./properties/PieceColor.java	/^    String color;$/;"	f	class:PieceColor
connectPlayers	./board/FillBoard.java	/^    public void connectPlayers() {$/;"	m	class:FillBoard
currentPosition	./pieces/Pawn.java	/^    private Position currentPosition;$/;"	f	class:Pawn	file:
currentX	./pieces/Rook.java	/^    private int currentX;$/;"	f	class:Rook	file:
currentY	./pieces/Rook.java	/^    private int currentY;$/;"	f	class:Rook	file:
figureMove	./pieces/Piece.java	/^    public static void figureMove(Position from, Position to, Piece piece) {$/;"	m	class:Piece
fillBoard	./game/Game.java	/^    private final FillBoard fillBoard = new FillBoard(boardArr);$/;"	f	class:Game	file:
fillEmpties	./board/FillBoard.java	/^    public void fillEmpties() {$/;"	m	class:FillBoard
game	./game/Game.java	/^    private boolean game = true;$/;"	f	class:Game	file:
getAvailableMoves	./pieces/Bishop.java	/^    public List<Position> getAvailableMoves() {$/;"	m	class:Bishop
getAvailableMoves	./pieces/Empty.java	/^    public List<Position> getAvailableMoves() {$/;"	m	class:Empty
getAvailableMoves	./pieces/King.java	/^    public List<Position> getAvailableMoves() {$/;"	m	class:King
getAvailableMoves	./pieces/Knight.java	/^    public List<Position> getAvailableMoves() {$/;"	m	class:Knight
getAvailableMoves	./pieces/Pawn.java	/^    public List<Position> getAvailableMoves() {$/;"	m	class:Pawn
getAvailableMoves	./pieces/Piece.java	/^    public abstract List<Position> getAvailableMoves();$/;"	m	class:Piece
getAvailableMoves	./pieces/Queen.java	/^    public List<Position> getAvailableMoves() {$/;"	m	class:Queen
getAvailableMoves	./pieces/Rook.java	/^    public List<Position> getAvailableMoves() {$/;"	m	class:Rook
getBlackPieces	./board/FillBoard.java	/^	public Piece[][] getBlackPieces() {$/;"	m	class:FillBoard
getBoard	./board/Board.java	/^    public Piece[][] getBoard() {$/;"	m	class:Board
getBoardImg	./board/Board.java	/^    private String getBoardImg() {$/;"	m	class:Board	file:
getCharacterB	./pieces/Piece.java	/^    public char getCharacterB() {$/;"	m	class:Piece
getCharacterW	./pieces/Piece.java	/^    public char getCharacterW() {$/;"	m	class:Piece
getColor	./pieces/Piece.java	/^    public PieceColor getColor() {$/;"	m	class:Piece
getPosition	./pieces/Piece.java	/^    public Position getPosition() {$/;"	m	class:Piece
getWhitePieces	./board/FillBoard.java	/^	public Piece[][] getWhitePieces() {$/;"	m	class:FillBoard
getX	./board/Position.java	/^    public int getX() {$/;"	m	class:Position
getY	./board/Position.java	/^    public int getY() {$/;"	m	class:Position
init	./board/Board.java	/^    public void init() {$/;"	m	class:Board
initFigure	./board/FillBoard.java	/^    private void initFigure(Piece[][] pieces, Piece piece) {$/;"	m	class:FillBoard	file:
isOtherFigureOnWay	./pieces/Bishop.java	/^    public boolean isOtherFigureOnWay(Position currentPosition, Position newPosition) {$/;"	m	class:Bishop
isOtherFigureOnWay	./pieces/Empty.java	/^    public boolean isOtherFigureOnWay(Position currentPosition, Position newPosition) {$/;"	m	class:Empty
isOtherFigureOnWay	./pieces/King.java	/^    public boolean isOtherFigureOnWay(Position currentPosition, Position newPosition) {$/;"	m	class:King
isOtherFigureOnWay	./pieces/Knight.java	/^    public boolean isOtherFigureOnWay(Position currentPosition, Position newPosition) {$/;"	m	class:Knight
isOtherFigureOnWay	./pieces/Pawn.java	/^    public boolean isOtherFigureOnWay(Position currentPosition, Position newPosition) {$/;"	m	class:Pawn
isOtherFigureOnWay	./pieces/Piece.java	/^    public abstract boolean isOtherFigureOnWay(Position currentPosition, Position newPosition);$/;"	m	class:Piece
isOtherFigureOnWay	./pieces/Queen.java	/^    public boolean isOtherFigureOnWay(Position currentPosition, Position newPosition) {$/;"	m	class:Queen
isOtherFigureOnWay	./pieces/Rook.java	/^    public boolean isOtherFigureOnWay(Position currentPosition, Position newPosition) {$/;"	m	class:Rook
isPositionFree	./pieces/Piece.java	/^    public static byte isPositionFree(Position newPos, Piece piece) {$/;"	m	class:Piece
iterate	./pieces/Rook.java	/^    private boolean iterate(int from, int to, boolean isX) {$/;"	m	class:Rook	file:
kingB	./board/FillBoard.java	/^    public static Piece kingB;$/;"	f	class:FillBoard
kingCheck	./game/Game.java	/^	private PieceColor kingCheck;$/;"	f	class:Game	file:
kingW	./board/FillBoard.java	/^    public static Piece kingW;$/;"	f	class:FillBoard
letterToNumber	./pieces/Piece.java	/^    public static int letterToNumber(String letter) {$/;"	m	class:Piece
lines_numbers	./board/Board.java	/^    private final String[] lines_numbers = new String[8];$/;"	f	class:Board	file:
main	./App.java	/^    public static void main( String[] args ) {$/;"	m	class:App
moveFigureIfAvailable	./game/Game.java	/^    private void moveFigureIfAvailable(Position oldPosition, int x, int y, int newX, int newY) {$/;"	m	class:Game	file:
newPosition	./pieces/Pawn.java	/^    private Position newPosition;$/;"	f	class:Pawn	file:
onDoubleStep	./pieces/Pawn.java	/^    private boolean onDoubleStep(int step) {$/;"	m	class:Pawn	file:
onOneStep	./pieces/Pawn.java	/^    private boolean onOneStep(int step) {$/;"	m	class:Pawn	file:
play	./game/Game.java	/^    private void play() {$/;"	m	class:Game	file:
position	./pieces/Piece.java	/^    private Position position;$/;"	f	class:Piece	file:
printError	./game/ColorPrint.java	/^    public static void printError(String text) {$/;"	m	class:ColorPrint
printInformation	./game/Game.java	/^    private void printInformation(int x, int y, int newX, int newY) {$/;"	m	class:Game	file:
printSuccess	./game/ColorPrint.java	/^    public static void printSuccess(String text) {$/;"	m	class:ColorPrint
printWarning	./game/ColorPrint.java	/^    public static void printWarning(String text) {$/;"	m	class:ColorPrint
refresh	./board/Board.java	/^    public void refresh() {$/;"	m	class:Board
rook	./pieces/Queen.java	/^    private final Rook rook;$/;"	f	class:Queen	file:
sc	./game/Game.java	/^    private static final Scanner sc = new Scanner(System.in);$/;"	f	class:Game	file:
setKingPosition	./board/FillBoard.java	/^	public static void setKingPosition(PieceColor color, int x, int y) {$/;"	m	class:FillBoard
setPosition	./pieces/Piece.java	/^    public void setPosition(Position position) {$/;"	m	class:Piece
setX	./board/Position.java	/^    public void setX(int x) {$/;"	m	class:Position
setY	./board/Position.java	/^    public void setY(int y) {$/;"	m	class:Position
start	./game/Game.java	/^    public void start() {$/;"	m	class:Game
toString	./properties/PieceColor.java	/^    public String toString() {$/;"	m	class:PieceColor
turn	./game/Game.java	/^    private PieceColor turn = PieceColor.WHITE;$/;"	f	class:Game	file:
whitePieces	./board/FillBoard.java	/^    private final Piece[][] whitePieces = new Piece[8][8];$/;"	f	class:FillBoard	file:
whitePlayersInit	./board/FillBoard.java	/^    public void whitePlayersInit() {$/;"	m	class:FillBoard
winnerColor	./game/Game.java	/^    private String winnerColor;$/;"	f	class:Game	file:
x	./board/Position.java	/^    private int x;$/;"	f	class:Position	file:
y	./board/Position.java	/^    private int y;$/;"	f	class:Position	file:
